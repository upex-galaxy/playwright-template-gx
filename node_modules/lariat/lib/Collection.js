"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collection = void 0;
const enhance_1 = require("./enhance");
const utils_1 = require("./utils");
class Collection {
    root;
    getByAltText;
    getByLabel;
    getByPlaceholder;
    getByRole;
    getByTestId;
    getByText;
    getByTitle;
    constructor(root) {
        this.root = root;
        this.getByAltText = this.enhanceMethod('getByAltText');
        this.getByLabel = this.enhanceMethod('getByLabel');
        this.getByPlaceholder = this.enhanceMethod('getByPlaceholder');
        this.getByRole = this.enhanceMethod('getByRole');
        this.getByTestId = this.enhanceMethod('getByTestId');
        this.getByText = this.enhanceMethod('getByText');
        this.getByTitle = this.enhanceMethod('getByTitle');
    }
    /**
     * Retrieve a locator to a given element on the page identified by the
     * selector.
     *
     * @param selector - The selector that identifies the element.
     * @param options - Options for how to build the locator.
     */
    el(selector, { frame, portal, ...options } = {}) {
        return this.getParent(frame, portal).locator(selector, options);
    }
    nest(collection, root) {
        const rootElement = typeof root === 'string' ? this.el(root) : root;
        const instance = new collection(rootElement);
        // If the root element is a locator, it can use the `nth`, `first`, and
        // `last` methods and thus it should be enhanced.
        return (0, utils_1.isLocator)(rootElement)
            ? (0, enhance_1.enhance)(collection, rootElement, instance)
            : instance;
    }
    /**
     * Returns the frame that the collection is attached to. This can be used when
     * nesting a collection if the nested collection's locators elements should
     * be based off the page or frame rather than the parent collection's root.
     *
     * If the root of the collection is a page, then the main frame of the page
     * will be returned.
     *
     * @example this.nest(TextField, this.frame)
     */
    get frame() {
        return (0, utils_1.isLocator)(this.root)
            ? // Playwright doesn't currently expose the frame of a locator as a
                // public API, so for now we need to get the private property.
                this.root._frame
            : 'mainFrame' in this.root
                ? this.root.mainFrame()
                : this.root;
    }
    /**
     * Returns the page that the collection is attached to. This can be used when
     * you need to access page methods inside your collection utility methods. For
     * example, if a utility needs to access `page.mouse`, this will allow that.
     *
     * @example this.page.mouse.down()
     */
    get page() {
        return this.frame.page();
    }
    getParent(frame, portal = false) {
        const root = portal ? this.frame : this.root;
        return frame ? root.frameLocator(frame) : root;
    }
    enhanceMethod(method) {
        const enhanced = (arg, { frame, portal, ...options } = {}) => {
            return this.getParent(frame, portal)[method](arg, options);
        };
        return enhanced;
    }
}
exports.Collection = Collection;
//# sourceMappingURL=Collection.js.map